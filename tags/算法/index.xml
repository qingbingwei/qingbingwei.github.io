<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on 清兵卫的博客</title>
    <link>https://qingbingwei.github.io/tags/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on 清兵卫的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 30 Mar 2024 21:29:57 +0800</lastBuildDate><atom:link href="https://qingbingwei.github.io/tags/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>KMP</title>
      <link>https://qingbingwei.github.io/post/kmp/</link>
      <pubDate>Sat, 30 Mar 2024 21:29:57 +0800</pubDate>
      
      <guid>https://qingbingwei.github.io/post/kmp/</guid>
      <description>字符串算法:KMP算法
字符串:由若干个字符组成的有序序列
字符串：末尾有一个隐含的结束符&amp;rsquo;\0&#39; 字符数组：末尾没有隐含结束符
字符串匹配问题:给出一个主串p 和一个模式串s，问s有没有在p中出现过，出现过几次，每次出现位置在哪里
p:dfghahjsgfhjas&amp;mdash;&amp;gt;m s:hjdj&amp;mdash;&amp;gt;n
1.BF算法(暴力匹配) O(n*m) for(int i = 0;i + LS &amp;lt; LP ;++i) { int j(0); int k(i); while(j &amp;lt; LS) { if(p[k] == s[j]) { ++j; ++k; } else { break; } } if(j == LS) { cout &amp;laquo; i &amp;laquo; endl; } }
2.KMP算法 O(n+m) next[0]=-1 next[1]=0 //以上均为默认 代码思路:模式串自己(错位)匹配自己</description>
    </item>
    
    <item>
      <title>动态规划</title>
      <link>https://qingbingwei.github.io/post/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link>
      <pubDate>Tue, 26 Mar 2024 19:57:35 +0800</pubDate>
      
      <guid>https://qingbingwei.github.io/post/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid>
      <description>动态规划&amp;mdash;&amp;ndash;&amp;gt;一类思想
动态规划: 线性动态规划 区间动态规划 背包问题 状态压缩动态规划 树型动态规划 插头动态规划 数位动态规划 ...... 运筹学 决策过程最优化 一般用来求解最优解问题 递归与DP区别: 递归:将求解的问题分解为若干个同类的子问题，子问题是否相互独立不影响 DP:将待求解问题分解成若干个子问题，先求解子问题，然后从子问题的解得到原问题的解，并且子问题之间往往不是互相独立的 DP问题两个性质: 1.最优子结构性质 2.重叠子问题性质 动态规划:将待求解问题分解成若干个子问题，先求解子问题， 然后从子问题的解得到原问题的解，并且子问题之间往往不是互相独立的 求解DP类型问题:递归 斐波那契数列: 1.递归实现----&amp;gt;记忆化搜索-----&amp;gt;自上而下求解 2.非递归实现(DP table)----&amp;gt;迭代-----&amp;gt;根据1中的记忆化数组，找到数组之中数据的关系-----&amp;gt;自下而上求解 DP解题思路: 1.辨别是不是DP问题 2.状态数组: 状态:子问题的状态/解 找状态数组: (1)用参数来描述状态，用一句话描述最终问题状态 (2)或者搜索-----&amp;gt;记忆化优化-----&amp;gt;记忆化数组就是状态数组 3.找状态转移方程:状态数组中状态之间的关系 (1)站在中间状态的角度考虑i，默认前i-1个状态的值已经知道 (2)搜索-----&amp;gt;记忆化优化-----&amp;gt;记忆化记录答案过程，隐含了转移公式 4.写代码:写法1或写法2 01背包问题: 有N种不同物品和一个容量为C的背包，每种物品有自己的重量w和价值v，，并且每种物品只有一件，可以装下物品的最大价值是多少?
1.辨题----&amp;gt;DP 2.状态数组: (1)从前n个物品中选择若干个，重量不超过C，价值最大 dp[n][c] = ans; dp[i][j] = x; 从前i个物品中选择若干个，重量不超过j，价值最大为x dp[0][j]=0 dp[i][0]=0 (2)暴力搜索 3.找状态转移方程:状态数组中状态之间的关系 (1)站在中间状态的角度考虑i，默认前i-1个状态的值已经知道 (2)搜索-----&amp;gt;记忆化优化-----&amp;gt;记忆化记录答案过程，隐含了转移公式 4.写代码:写法1或写法2 </description>
    </item>
    
  </channel>
</rss>
