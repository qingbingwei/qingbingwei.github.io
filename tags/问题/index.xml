<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>问题 on 清兵卫的博客</title>
    <link>https://qingbingwei.github.io/tags/%E9%97%AE%E9%A2%98/</link>
    <description>Recent content in 问题 on 清兵卫的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 07 Nov 2023 23:01:00 +0800</lastBuildDate><atom:link href="https://qingbingwei.github.io/tags/%E9%97%AE%E9%A2%98/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>数据结构 顺序表</title>
      <link>https://qingbingwei.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%A1%BA%E5%BA%8F%E8%A1%A8/</link>
      <pubDate>Tue, 07 Nov 2023 23:01:00 +0800</pubDate>
      
      <guid>https://qingbingwei.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%A1%BA%E5%BA%8F%E8%A1%A8/</guid>
      <description>今天尝试实现顺序表，基本的增，删，查，插，改功能基本实现，但扩容时存在部分问题，只能部分扩容，原因尚未找出，等待后续优化（鬼晓得什么时候，也许明天）
代码如下（博客显示有点问题，不知道为什么，之后去修复一下）
#define _CRT_SECURE_NO_WARNINGS #include&amp;lt;iostream&amp;gt; #include&amp;lt;stdexcept&amp;gt; using namespace std; template&amp;lt;class T&amp;gt; class ArrayList { public: ArrayList(int Num):size(0) //初始化构造函数 { date = new T[Num]; length = Num; } void AddEle(ArrayList* pa,T ele)//增添元素 { //判断是否超过最大容量 try { if (pa-&amp;gt;size &amp;lt; pa-&amp;gt;length) { pa-&amp;gt;date[size] = ele; pa-&amp;gt;size++; } else { throw runtime_error(&amp;quot;空间已满，是否扩容 Y/N&amp;quot;); } } catch (runtime_error err) { cout &amp;lt;&amp;lt; err.what() &amp;lt;&amp;lt; endl; char ch(0); cin &amp;gt;&amp;gt; ch; if (ch == &#39;Y&#39; || ch == &#39;y&#39;) { T* date_copy = new T[size + 1]; for (size_t i = 0; i &amp;lt; pa-&amp;gt;length; i++) { date_copy[i] = date[i]; }//将值存储到新空间 delete[] date; if (date !</description>
    </item>
    
    <item>
      <title>《C&#43;&#43;Primer》读后感2</title>
      <link>https://qingbingwei.github.io/post/c&#43;&#43;primer%E8%AF%BB%E5%90%8E%E6%84%9F2/</link>
      <pubDate>Thu, 02 Nov 2023 22:14:27 +0800</pubDate>
      
      <guid>https://qingbingwei.github.io/post/c&#43;&#43;primer%E8%AF%BB%E5%90%8E%E6%84%9F2/</guid>
      <description>这两天在阅读过程中又遇到了一些问题，同时也学习到了一些新的语法，具体如下:
1.顶层const与底层const拷贝规则
其中顶层const不会受到什么影响，但是底层const的限制不能忽视，这是为了防止拷贝对象能够修改底层const指针指向对象 即 const int a = 0; const int *const p1 = &amp;amp;a; int *p2 = p1; //错误 2.constexpr变量
如果变量为常量表达式，最好声明为constexpr类型 3.constexpr和指针
限定符constexpr仅对指针有效，对其所指对象无效 4.类型别名
1.typedef 2.using 注：typedef char *pstring; const char *cstr = 0; 与 const pstring cstr = 0;含义不同 5.auto
1.auto auto定义变量必须有初始值 2.auto和引用 编译器以引用对象的类型作为auto的类型 设置类型为auto的引用时，初始值中的顶层常量属性仍然保留 3.auto和const auto一般会忽略顶层const（希望推断出则需明确指出p62），保留底层const 6.decltype
1.decltype 编译器分析表达式得到类型，但不计算 2.decltype与引用 如果表达式内容为解引用操作，将得到引用类型 **** decltype（（variable））结果永远是引用 p63 7.左值和右值
使用左值地址，使用右值数据 8.预处理与头文件
9.using与命名空间
头文件不应包含using声明 **** 10.cin与文件末尾 p78
11.string与字符串字面值
可以使用 + 进行追加 注：string类 .</description>
    </item>
    
    <item>
      <title>《C&#43;&#43;primer》读后感</title>
      <link>https://qingbingwei.github.io/post/c&#43;&#43;primer%E8%AF%BB%E5%90%8E%E6%84%9F/</link>
      <pubDate>Mon, 30 Oct 2023 22:06:01 +0800</pubDate>
      
      <guid>https://qingbingwei.github.io/post/c&#43;&#43;primer%E8%AF%BB%E5%90%8E%E6%84%9F/</guid>
      <description>阅读了《C++primer》后，发现自己确实对C++的认识过于浅薄，还有很多我不了解的语法与注意事项需要学习。
1.初始化的四种方式 1.int a = 0; 2.int a = {0}; 3.int a(0); 4.int a{0};
其中方式2，4（初始化列表）对于类型检查更加严格，若会出现丢失数据风险则编译器报错。
2.定义 ！= 声明 1.任何包含显式声明的声明即成为定义 int a = 0;为定义而非声明 extern int a;为声明而非定义 extern int a = 0;为定义而非声明 3.初始化 ！= 赋值 4.建议使用nullptr为指针赋空值 int *p = nullptr;
5.指针值的四种状态 p47 对第二种理解不了&amp;mdash;指向紧邻对象所指空间下一个位置 6.加深对于const的理解 1.常量引用与指向常量指针：前者可绑定非常量值，后者可指向非常量对象 2.顶层const与底层const：前者狭义即指针本身是常量，广义即表示任意对象为常量，后者表示指针所指对象为一个常量
今天阅读收获颇多。</description>
    </item>
    
  </channel>
</rss>
