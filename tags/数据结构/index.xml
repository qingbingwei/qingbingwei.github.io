<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据结构 on 清兵卫的博客</title>
    <link>https://qingbingwei.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
    <description>Recent content in 数据结构 on 清兵卫的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 11 Dec 2023 22:25:55 +0800</lastBuildDate><atom:link href="https://qingbingwei.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>数据结构 平衡二叉树</title>
      <link>https://qingbingwei.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Mon, 11 Dec 2023 22:25:55 +0800</pubDate>
      
      <guid>https://qingbingwei.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>开始学习AVL树了，目前简单了解了其相关概念
平衡因子：
基本旋转方式：
1.左单旋 记失衡节点为x x右孩子为y x-&amp;gt;right = y-&amp;gt;left y-&amp;gt;left = x 2.右单旋 记失衡节点为x x左孩子为y x-&amp;gt;left = y-&amp;gt;right y-&amp;gt;right = x 最小失衡子树：在新插入的节点向上查找，以第一个平衡因子的绝对值超过一的节点为根节点的子树 插入：
1.进行BST插入 2.算插入节点的所有祖先节点的平衡因子 节点x高度x-&amp;gt;h = max(x-&amp;gt;left-&amp;gt;h,x-&amp;gt;right-&amp;gt;h) + 1 节点平衡因子:x-&amp;gt;left-&amp;gt;h - x-&amp;gt;right-&amp;gt;h(左右子树高度差的绝对值) 3.插入导致失衡情况，进行旋转（优先调整最小失衡子树） 判断失衡：
1.先找出x-&amp;gt;left和x-&amp;gt;right中高度较高的 2.再去高度子树里面去看根节点的哪边的子树高 4.调用对应调整函数
假设最小失衡子树根节点为A 1.LL 在A节点左孩子的左子树插入节点破坏平衡 调整策略：对A进行一次右旋 2.LR 在A节点左孩子的右子树插入节点破坏平衡 调整策略：（1）以A-&amp;gt;left为中心进行左旋，转换成为了LL (2)按照LL情况进行操作 3.RR 在A节点右孩子的右子树插入节点破坏平衡 调整策略：对A进行一次左旋 4.RL 在A节点右孩子的左子树插入节点破坏平衡 调整策略：（1）以A-&amp;gt;right为中心进行右旋，转换为RR (2)按照RR情况进行操作 删除操作
1.执行二叉排序树删除 2.判断是否失衡 在x节点的一边子树中删除了一个节点，就等价于在其另一边子树插入了一个节点导致的失衡---&amp;gt;删除的失衡类型及调整方式和插入的一模一样 左删除 相当于 右边插入：RR RL 右删除 相当于 左边插入：LL LR 终于完成了AVL树了，接下来就学习一下哈夫曼树（似乎是另一条路线的样子）和时间复杂度了
日常：麻了，四级好像要寄了，算了一下，似乎430~440的样子（作文翻译全按及格算的），希望能过 下周二考工程师职业素养期末，坐大牢，本来说周末复习的，装一个远行星号装了一上午，下午还有文明经典，属实难绷
代码实现如下
#define _CRT_SECURE_NO_WARNINGS #include&amp;lt;iostream&amp;gt; #include&amp;lt;algorithm&amp;gt; using namespace std; template&amp;lt;class T&amp;gt; class AVL_Node { public: T data; AVL_Node&amp;lt;T&amp;gt;* left = nullptr; AVL_Node&amp;lt;T&amp;gt;* right = nullptr; int h = 1;//记录节点高度 }; template&amp;lt;class T&amp;gt; class AVL_Tree { public: AVL_Tree() { root = new AVL_Node&amp;lt;T&amp;gt;; if (root == nullptr) { cout &amp;lt;&amp;lt; &amp;quot;开辟失败&amp;quot; &amp;lt;&amp;lt; endl; } else { root-&amp;gt;left = nullptr; root-&amp;gt;right = nullptr; } } AVL_Tree(T k) { root = new AVL_Node&amp;lt;T&amp;gt;; if (root == nullptr) { cout &amp;lt;&amp;lt; &amp;quot;开辟失败&amp;quot; &amp;lt;&amp;lt; endl; } else { root-&amp;gt;left = nullptr; root-&amp;gt;right = nullptr; root-&amp;gt;data = k; } } AVL_Node&amp;lt;T&amp;gt;* AVL_Insert(AVL_Node&amp;lt;T&amp;gt;* ro, T k) { if (ro == nullptr) { AVL_Node&amp;lt;T&amp;gt;* s = new AVL_Node&amp;lt;T&amp;gt;; s-&amp;gt;data = k; return s; } else if (k &amp;lt; ro-&amp;gt;data) { ro-&amp;gt;left = AVL_Insert(ro-&amp;gt;left, k); //高度可能变化,判断是否失衡 if (Get_h(ro-&amp;gt;left) - Get_h(ro-&amp;gt;right) &amp;gt; 1) { AVL_Node&amp;lt;T&amp;gt;* l = ro-&amp;gt;left;//用于判断失衡类型 //也可以通过子树高度判断 //if (Get_h(l-&amp;gt;left) &amp;gt; Get_h(l-&amp;gt;right)) if (k &amp;lt; l-&amp;gt;data) { //LL ro = LL_rotation(ro); } else { //LR ro = LR_rotation(ro); } } //返回变化后子树根节点并且改变高度(因为都要进行，所以可以一起挪到函数末尾)	} else { ro-&amp;gt;right = AVL_Insert(ro-&amp;gt;right, k); //高度可能变化,判断是否失衡 if (Get_h(ro-&amp;gt;right) - Get_h(ro-&amp;gt;left) &amp;gt; 1) { AVL_Node&amp;lt;T&amp;gt;* r = ro-&amp;gt;right;//用于判断失衡类型 //也可以通过子树高度判断 //if(Get_h(r-&amp;gt;right) &amp;gt; Get_h(r-&amp;gt;left)) if (k &amp;gt; r-&amp;gt;data) { //RR ro = RR_rotation(ro); } else { //RL ro = RL_rotation(ro); } } //返回变化后子树根节点并且改变高度(因为都要进行，所以可以一起挪到函数末尾) } ro-&amp;gt;h = max(Get_h(ro-&amp;gt;left), Get_h(ro-&amp;gt;right)) + 1; return ro; } int Get_h(AVL_Node&amp;lt;T&amp;gt;* x) { if (x == nullptr) { return 0; } else { return x-&amp;gt;h; } } AVL_Node&amp;lt;T&amp;gt;* LL_rotation(AVL_Node&amp;lt;T&amp;gt;* ro) { AVL_Node&amp;lt;T&amp;gt;* y = ro-&amp;gt;left; ro-&amp;gt;left = y-&amp;gt;right; y-&amp;gt;right = ro; //高度可能改变 ro-&amp;gt;h = max(Get_h(ro-&amp;gt;left), Get_h(ro-&amp;gt;right)) + 1; y-&amp;gt;h = max(Get_h(y-&amp;gt;left), Get_h(y-&amp;gt;right)) + 1; return y; } AVL_Node&amp;lt;T&amp;gt;* LR_rotation(AVL_Node&amp;lt;T&amp;gt;* ro) { ro-&amp;gt;left = RR_rotation(ro-&amp;gt;left); ro = LL_rotation(ro); return ro; } AVL_Node&amp;lt;T&amp;gt;* RR_rotation(AVL_Node&amp;lt;T&amp;gt;* ro) { AVL_Node&amp;lt;T&amp;gt;* y = ro-&amp;gt;right; ro-&amp;gt;right = y-&amp;gt;left; y-&amp;gt;left = ro; //高度可能改变 ro-&amp;gt;h = max(Get_h(ro-&amp;gt;left), Get_h(ro-&amp;gt;right)) + 1; y-&amp;gt;h = max(Get_h(y-&amp;gt;left), Get_h(y-&amp;gt;right)) + 1; return y; } AVL_Node&amp;lt;T&amp;gt;* RL_rotation(AVL_Node&amp;lt;T&amp;gt;* ro) { ro-&amp;gt;right =LL_rotation(ro-&amp;gt;right); ro = RR_rotation(ro); return ro; } void mid_order(AVL_Node&amp;lt;T&amp;gt;* ro) { if (ro == nullptr) { return; } if (ro-&amp;gt;left !</description>
    </item>
    
    <item>
      <title>数据结构 排序二叉树</title>
      <link>https://qingbingwei.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%8E%92%E5%BA%8F%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Mon, 11 Dec 2023 11:36:02 +0800</pubDate>
      
      <guid>https://qingbingwei.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%8E%92%E5%BA%8F%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>又一次被树折磨，这一次是排序二叉树，似乎能够理解为什么set容器能够实现插入后自动排序了，也去查了一下资料，set底层确实是以二叉树实现的。
一点点注意事项： 如果序列本身为升序或者降序，会形成斜树（即链表，起不到优化作用） BST + 限制 = AVL树
接下来就是AVL树（二叉平衡树）了，准备坐大牢，已经在思考红黑树会有多坐牢了，不过学完树之后似乎只剩图和串了，之后就要开始算法坐大牢了&amp;hellip;&amp;hellip;
日常： 快放假了，但是一堆期末考试在等着我，估计了一下约莫有八九门的样子，希望别挂科（应该不会，感觉学的还是挺好的，就是历史闭卷有点难绷），距离四级还有六天，似乎注定要裸考了，乐
代码实现：
#define _CRT_SECURE_NO_WARNINGS #include&amp;lt;iostream&amp;gt; using namespace std; template&amp;lt;class T&amp;gt; class BST_Node { public: T data; BST_Node&amp;lt;T&amp;gt;* left; BST_Node&amp;lt;T&amp;gt;* right; public: BST_Node() { left = nullptr; right = nullptr; } }; template&amp;lt;class T&amp;gt; class BST { public: BST_Node&amp;lt;T&amp;gt;* root; public: BST(T k) { root = new BST_Node&amp;lt;T&amp;gt;; if (root == nullptr) { cout &amp;lt;&amp;lt; &amp;quot;建树失败&amp;quot; &amp;lt;&amp;lt; endl; } else { root-&amp;gt;data = k; } } //非递归实现插入 BST_Node&amp;lt;T&amp;gt;* Insert_non_recursion(T k) { BST_Node&amp;lt;T&amp;gt;* s = new BST_Node&amp;lt;T&amp;gt;; if (s == nullptr) { cout &amp;lt;&amp;lt; &amp;quot;插入失败&amp;quot; &amp;lt;&amp;lt; endl; } else { s-&amp;gt;data = k; s-&amp;gt;left = nullptr; s-&amp;gt;right = nullptr; //通过p进行遍历，pre指向p父亲节点 BST_Node&amp;lt;T&amp;gt;* p = root; BST_Node&amp;lt;T&amp;gt;* pre = nullptr; while (p !</description>
    </item>
    
    <item>
      <title>数据结构 树</title>
      <link>https://qingbingwei.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91/</link>
      <pubDate>Wed, 22 Nov 2023 20:07:38 +0800</pubDate>
      
      <guid>https://qingbingwei.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91/</guid>
      <description>被文科折磨的百忙之中抽空学习(麻了，我还是个工科生吗)，学习完之后一堆文科小组作业等着我&amp;hellip;&amp;hellip;(主打一个裸考四级，乐)
树型结构：逻辑结构 概念：树是存储一对多关系的数据的逻辑结构，在树中，用节点存储数据
节点分类: 1.根节点(无前驱节点) 2.叶子节点(无子节点) 3.内部节点(有些教材把根节点归为内部节点)
父子关系和兄弟关系(一般理解为广义兄弟关系)
树：度/阶&amp;mdash;表示节点分了多少个叉
节点的度：该节点孩子节点的数目/分叉的数目 树的度：max(所有节点的度)，如果树的度为n，称为n叉树
树的高度和深度：在数值上一样(方向不一样，从上往下或从下往上) 结点的深度：注意方向即可
方便操作根节点，在之前增加一个空节点(与链表头节点类似) 方便操作叶子节点，在其之后增加一个空节点
存储结构:
存一棵树：1.节点数据 2.数据之间的关系&amp;ndash;父子
1.双亲(父亲)表示法：方便找父亲，不方便找孩子 1.顺序存储方式存数据：&amp;ndash;数组 2.在存数据的同时，把每个数据的父亲所在下标存一下
2.孩子表示法： 1.顺序存储方式存数据：&amp;ndash;数组 2.链表来存每个节点孩子的数据
3.孩子兄弟表示法&amp;mdash;二叉链表
二叉树
两种特殊二叉树 1.满二叉树：深度为k，并且节点个数为(2^k)-1的二叉树 2.完全二叉树；对满二叉树，从下向上，从右向左依次删掉若干个节点，剩下的树就是完全二叉树 性质：默认根节点是第一层 1.在二叉树的第i层，最多有2^(i - 1)个节点
2.深度为k的二叉树，最多有(2^k)-1个节点（等比求和）
3.在一棵二叉树中，叶子节点的数目比度为2的节点数目多一个
4.具有n个节点的完全二叉树的深/高度为(logn) + 1, 其中logn向下取整
5.对于一棵完全二叉树，进行编号，编号规则为：根节点为1，然后从上到下，从左到右。除根节点外，节点i的父亲节点编号为i/2(向下取整)。除叶子节点外，节点i的左孩子节点编号为2i，右节点为2i+1
补充性质：任何一棵二叉树都可以加NULL节点，从而补成一棵满(或完全)二叉树(结合性质5得到一个存二叉树的方式&amp;ndash;顺序存储，基于数组)
二叉树的操作 1.建树--插入数据 2.遍历（两类四种）：沿着某条路径，对树中的节点都遍历一次且仅遍历一次。 1.层次遍历--广度优先遍历 遍历顺序：从上往下，依次输出每一层节点（左-&amp;gt;右） 2.深度优先遍历：先序遍历(根，左，右)，中序遍历(左，根，右)，后序遍历(左，右，根) 3.线索化 背景： 1.n个节点二叉树，以二叉链表存储，一共2n个指针域，n-1个真正存储了指针，n+1为空，极大浪费空间 2.某一节点的中序遍历序列的前驱与后继是谁 3.如何快速得到某节点中序遍历序列中的前驱与后继 具体操作： 1.如果一个节点其左孩子指针域为空，那么将该指针域指向其前驱节点 2.如果一个节点其右孩子指针域为空，那么将该指针域指向其后继节点 历时两周，终于把二叉树学习完了，不过这只是开始，紧接着来到的是排序二叉树，二叉平衡树&amp;hellip;&amp;hellip;
二叉树具体实现如下（包括了广度遍历，深度遍历（递归与非递归实现），线索化，查找中序遍历前驱与后继等操作）
#define _CRT_SECURE_NO_WARNINGS #include&amp;lt;iostream&amp;gt; using namespace std; //链栈，用于实现非递归深度优先遍历 template&amp;lt;class T&amp;gt; class stack_Node { public: T data; stack_Node&amp;lt;T&amp;gt;* next; }; template&amp;lt;class T&amp;gt; class m_stack { public: stack_Node&amp;lt;T&amp;gt;* head; public: m_stack() { head = new stack_Node&amp;lt;T&amp;gt;; if (head == nullptr) { cout &amp;lt;&amp;lt; &amp;quot;开辟失败&amp;quot; &amp;lt;&amp;lt; endl; } else { head-&amp;gt;next = nullptr; } } void m_push(T k) { stack_Node&amp;lt;T&amp;gt;* s = new stack_Node&amp;lt;T&amp;gt;; s-&amp;gt;next = head-&amp;gt;next; s-&amp;gt;data = k; head-&amp;gt;next = s; } T m_pop() { if (m_empty()) { cout &amp;lt;&amp;lt; &amp;quot;栈空&amp;quot; &amp;lt;&amp;lt; endl; } else { //p指向要删除的首元节点 stack_Node&amp;lt;T&amp;gt;* p = head-&amp;gt;next; T k = p-&amp;gt;data; head-&amp;gt;next = p-&amp;gt;next; delete p; p = nullptr; return k; } } bool m_empty() { if (head-&amp;gt;next == nullptr) return true; else return false; } void get_top() { if (m_empty()) { cout &amp;lt;&amp;lt; &amp;quot;栈空&amp;quot; &amp;lt;&amp;lt; endl; } else { cout &amp;lt;&amp;lt; head-&amp;gt;next-&amp;gt;data &amp;lt;&amp;lt; endl; } } }; //链式队列，用于实现广度优先遍历 template&amp;lt;class T&amp;gt; class q_Node { public: T data; q_Node&amp;lt;T&amp;gt;* next; }; template&amp;lt;class T&amp;gt; class Link_queue { public: q_Node&amp;lt;T&amp;gt;* head;//指向头节点的指针 q_Node&amp;lt;T&amp;gt;* rear;//指向队尾元素所在节点的指针 public: Link_queue() { head = new q_Node&amp;lt;T&amp;gt;; rear = head; if (head == nullptr) { cout &amp;lt;&amp;lt; &amp;quot;开辟失败&amp;quot; &amp;lt;&amp;lt; endl; } else { head-&amp;gt;next = nullptr; rear-&amp;gt;next = nullptr; } } bool m_Empty() { if (head-&amp;gt;next == nullptr) { return true; } return false; } void En_queue(T k) { q_Node&amp;lt;T&amp;gt;* s = new q_Node&amp;lt;T&amp;gt;; if (s == nullptr) { cout &amp;lt;&amp;lt; &amp;quot;开辟失败&amp;quot; &amp;lt;&amp;lt; endl; } else { //新节点插入队尾 s-&amp;gt;data = k; s-&amp;gt;next = nullptr; rear-&amp;gt;next = s; rear = s; } } T Del_queue() { //出队时需要注意是否是首元节点出队 T x(0);//保存出队元素 //判空 //1.</description>
    </item>
    
    <item>
      <title>数据结构 队列</title>
      <link>https://qingbingwei.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97/</link>
      <pubDate>Sat, 18 Nov 2023 11:14:33 +0800</pubDate>
      
      <guid>https://qingbingwei.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97/</guid>
      <description>学习完了线性结构的最后一个类型了，接下来似乎就是很难实现的分支结构了，一个红黑树似乎会有上千行代码的样子，不知道到时候要写多久。
实现了顺序队列，链式队列，循环队列，顺序双端队列，链式双端队列，同时对优先队列有了一定了解
代码实现如下：
顺序队列：
#define _CRT_SECURE_NO_WARNINGS #include&amp;lt;iostream&amp;gt; using namespace std; template&amp;lt;class T&amp;gt; class m_queue { public: m_queue(int n) { size = n; data = new T[size]; if (data == nullptr) { cout &amp;lt;&amp;lt; &amp;quot;开辟失败&amp;quot; &amp;lt;&amp;lt; endl; } front = 0; rear = 0; //指向最后一个元素下一个位置 } void En_queue(T k) { //判满(牺牲一个位置) if (rear == size - 1) { cout &amp;lt;&amp;lt; &amp;quot;队满&amp;quot; &amp;lt;&amp;lt; endl; } else { data[rear] = k; cout &amp;lt;&amp;lt; k &amp;lt;&amp;lt; &amp;quot;入队&amp;quot; &amp;lt;&amp;lt; endl; rear++; } } void Del_queue() { int x(0);//记录出队元素 //判空 if (front == rear) { cout &amp;lt;&amp;lt; &amp;quot;队空&amp;quot; &amp;lt;&amp;lt; endl; } else { x = data[front]; cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;quot;出队&amp;quot; &amp;lt;&amp;lt; endl; front++; } } void m_empty() { if (front == rear) { cout &amp;lt;&amp;lt; &amp;quot;队空&amp;quot; &amp;lt;&amp;lt; endl; } } void m_full() { if (rear == size) { cout &amp;lt;&amp;lt; &amp;quot;队满&amp;quot; &amp;lt;&amp;lt; endl; } } public: int size;//队列大小 T* data; int front; //队头指针 int rear; //队尾指针 }; int main() { m_queue&amp;lt;int&amp;gt; q(5); q.</description>
    </item>
    
    <item>
      <title>数据结构_栈</title>
      <link>https://qingbingwei.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88/</link>
      <pubDate>Tue, 14 Nov 2023 17:13:49 +0800</pubDate>
      
      <guid>https://qingbingwei.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88/</guid>
      <description>今天成功实现了栈，可能因为栈比较简单，没花太多时间，毕竟就是一种特殊的表，比上次链表好多了，这次写链栈快多了。
代码如下
顺序栈
#define _CRT_SECURE_NO_WARNINGS #include&amp;lt;iostream&amp;gt; using namespace std; template&amp;lt;class T&amp;gt; class m_stack { public: m_stack(int n) { size = n; data = new T[n]; if (data == nullptr) { cerr &amp;lt;&amp;lt; &amp;quot;开辟失败&amp;quot; &amp;lt;&amp;lt; endl; } top = -1;//初始化栈顶指针 } void m_push(T k) { if (this-&amp;gt;top == this-&amp;gt;size - 1) { cout &amp;lt;&amp;lt; &amp;quot;栈满&amp;quot; &amp;lt;&amp;lt; endl; } else { this-&amp;gt;top++; this-&amp;gt;data[top] = k; //若top初始值为0 /* *if(s.top == s.size) { } else { s.</description>
    </item>
    
    <item>
      <title>数据结构 双链表及循环链表</title>
      <link>https://qingbingwei.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%8F%8C%E9%93%BE%E8%A1%A8%E5%8F%8A%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Sat, 11 Nov 2023 18:15:45 +0800</pubDate>
      
      <guid>https://qingbingwei.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%8F%8C%E9%93%BE%E8%A1%A8%E5%8F%8A%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/</guid>
      <description>学习过后成功实现了双链表与单向循环链表及双向循环链表，虽然改bug改了一天就是了。
本来以为双链表本身没什么问题，只要稍作修改就可以变为循环链表，但没考虑到nullptr在循环链表中不存在，导致改了好久，最后才意识到
代码如下
双链表
#define _CRT_SECURE_NO_WARNINGS #include&amp;lt;iostream&amp;gt; #include&amp;lt;cassert&amp;gt; using namespace std; template&amp;lt;class T&amp;gt; class Node { public: T date; Node* next; Node* pre; }; template&amp;lt;class T&amp;gt; class LinkList { public: Node&amp;lt;T&amp;gt;* m_head; public: LinkList() { m_head = new Node&amp;lt;T&amp;gt;; if (m_head == nullptr) { cout &amp;lt;&amp;lt; &amp;quot;开辟失败&amp;quot; &amp;lt;&amp;lt; endl; } else { m_head-&amp;gt;next = nullptr; m_head-&amp;gt;pre = nullptr; } } //查找函数 LinkList* Find(LinkList* head, T k) { Node&amp;lt;T&amp;gt;* pt = head-&amp;gt;m_head-&amp;gt;next; while (pt-&amp;gt;next !</description>
    </item>
    
    <item>
      <title>数据结构 链表</title>
      <link>https://qingbingwei.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%8D%95%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Wed, 08 Nov 2023 20:13:05 +0800</pubDate>
      
      <guid>https://qingbingwei.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%8D%95%E9%93%BE%E8%A1%A8/</guid>
      <description>单链表：
1.节点（结点）：数据加指向下一个数据的地址（指向下一个数据的指针），组成了了一个节点 2.链表由若干节点组成 3.头指针：存储第一个节点的地址的指针，头指针可以标记一个链表
两个特殊节点： 1.首元节点：第一个存储真实数据的节点。（非空链表，一定有首元节点） 2.头节点：链表中第一个不存储真实数据的节点（头节点可有可无），如果头节点存在，那么头节点一定是链表的第一个节点
声明链表==声明节点
增强可读性，声明头指针 linklist l;
头节点作用： 1.当不带头节点时，对首元节点的操作需要涉及到头指针，非常特殊； 带头节点时，首元节点与其他节点无异 2.对空链表的操作：带头节点，空链表与非空链表均有节点，统一起来了
1.增： 不带头节点的链表：在首元节点前插入一个节点，需要改变头指针
初步代码实现如下： #define _CRT_SECURE_NO_WARNINGS
#include&amp;lt;iostream&amp;gt; using namespace std; template&amp;lt;class T&amp;gt; class Node { public: T date; Node* next; }; template&amp;lt;class T&amp;gt; class LinkList { public: Node&amp;lt;T&amp;gt;* m_head; public: LinkList() { m_head = new Node&amp;lt;T&amp;gt;; if (m_head == nullptr) { cout &amp;lt;&amp;lt; &amp;quot;开辟失败&amp;quot; &amp;lt;&amp;lt; endl; } else { m_head-&amp;gt;next = nullptr; } } //查找函数 LinkList* Find(LinkList* head, T k) { Node&amp;lt;T&amp;gt;* pt = head-&amp;gt;m_head-&amp;gt;next; while (pt-&amp;gt;next !</description>
    </item>
    
    <item>
      <title>数据结构 顺序表</title>
      <link>https://qingbingwei.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%A1%BA%E5%BA%8F%E8%A1%A8/</link>
      <pubDate>Tue, 07 Nov 2023 23:01:00 +0800</pubDate>
      
      <guid>https://qingbingwei.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%A1%BA%E5%BA%8F%E8%A1%A8/</guid>
      <description>今天尝试实现顺序表，基本的增，删，查，插，改功能基本实现，但扩容时存在部分问题，只能部分扩容，原因尚未找出，等待后续优化（鬼晓得什么时候，也许明天）
2023.11.11 今天提交链表顺便修复一下之前的bug，扩容时忘了size++
代码如下（博客显示有点问题，不知道为什么，之后去修复一下）
#define _CRT_SECURE_NO_WARNINGS #include&amp;lt;iostream&amp;gt; #include&amp;lt;stdexcept&amp;gt; using namespace std; template&amp;lt;class T&amp;gt; class ArrayList { public: ArrayList(int Num) :size(0) //初始化构造函数 { date = new T[Num]; length = Num; } void AddEle(ArrayList* pa, T ele)//增添元素 { //判断是否超过最大容量 try { if (pa-&amp;gt;size &amp;lt; pa-&amp;gt;length) { pa-&amp;gt;date[size] = ele; pa-&amp;gt;size++; } else { throw runtime_error(&amp;quot;空间已满，是否扩容 Y/N&amp;quot;); } } catch (runtime_error err) { cout &amp;lt;&amp;lt; err.what() &amp;lt;&amp;lt; endl; char ch(0); cin &amp;gt;&amp;gt; ch; if (ch == &#39;Y&#39; || ch == &#39;y&#39;) { T* date_copy = new T[size + 1]; for (size_t i = 0; i &amp;lt; pa-&amp;gt;length; i++) { date_copy[i] = date[i]; }//将值存储到新空间 delete[] date; if (date !</description>
    </item>
    
  </channel>
</rss>
